9	1	Keyword	using
9	7	Keyword	namespace
9	17	Identifier	std
11	1	Keyword	typedef
11	9	Keyword	long
11	14	Keyword	long
11	19	Identifier	ll
12	1	Keyword	typedef
12	9	Identifier	pair
12	13	Punctuation	<
12	14	Keyword	int
12	17	Punctuation	,
12	18	Keyword	int
12	21	Punctuation	>
12	23	Identifier	pr
14	1	Keyword	const
14	7	Identifier	ll
14	10	Identifier	H
14	11	Punctuation	=
14	12	Literal	100456
16	1	Identifier	ll
16	4	Identifier	pow1
16	8	Punctuation	[
16	9	Literal	1000005
16	16	Punctuation	]
16	17	Punctuation	,
16	18	Identifier	pow2
16	22	Punctuation	[
16	23	Literal	1000005
16	30	Punctuation	]
16	31	Punctuation	,
16	32	Identifier	powd
16	36	Punctuation	[
16	37	Literal	1000005
16	44	Punctuation	]
18	1	Keyword	void
18	6	Identifier	pre
18	9	Punctuation	(
18	10	Punctuation	)
18	12	Punctuation	{
19	3	Identifier	vector
19	9	Punctuation	<
19	10	Keyword	int
19	13	Punctuation	>
19	15	Identifier	vi
19	17	Punctuation	;
20	3	Identifier	pow1
20	7	Punctuation	;
21	3	Identifier	pow1
21	7	Punctuation	[
21	8	Literal	0
21	9	Punctuation	]
21	10	Punctuation	=
21	11	Identifier	pow2
21	15	Punctuation	[
21	16	Literal	0
21	17	Punctuation	]
21	18	Punctuation	=
21	19	Identifier	powd
21	23	Punctuation	[
21	24	Literal	0
21	25	Punctuation	]
21	26	Punctuation	=
21	27	Literal	1
21	28	Punctuation	;
22	3	Keyword	for
22	6	Punctuation	(
22	7	Keyword	int
22	11	Identifier	i
22	12	Punctuation	=
22	13	Literal	1
22	14	Punctuation	;
22	15	Identifier	i
22	16	Punctuation	<=
22	18	Literal	1e6
22	21	Punctuation	;
22	22	Identifier	i
22	23	Punctuation	++
22	25	Punctuation	)
22	27	Punctuation	{
23	4	Identifier	pow1
23	8	Punctuation	[
23	9	Identifier	i
23	10	Punctuation	]
23	11	Punctuation	=
23	12	Identifier	pow1
23	16	Punctuation	[
23	17	Identifier	i
23	18	Punctuation	-
23	19	Literal	1
23	20	Punctuation	]
23	21	Punctuation	*
23	22	Identifier	H
23	23	Punctuation	%
23	24	Identifier	MOD1
23	28	Punctuation	;
24	4	Identifier	pow2
24	8	Punctuation	[
24	9	Identifier	i
24	10	Punctuation	]
24	11	Punctuation	=
24	12	Identifier	pow2
24	16	Punctuation	[
24	17	Identifier	i
24	18	Punctuation	-
24	19	Literal	1
24	20	Punctuation	]
24	21	Punctuation	*
24	22	Identifier	H
24	23	Punctuation	%
24	24	Identifier	MOD2
24	28	Punctuation	;
25	4	Identifier	powd
25	8	Punctuation	[
25	9	Identifier	i
25	10	Punctuation	]
25	11	Punctuation	=
25	12	Identifier	powd
25	16	Punctuation	[
25	17	Identifier	i
25	18	Punctuation	-
25	19	Literal	1
25	20	Punctuation	]
25	21	Punctuation	*
25	22	Literal	10LL
25	26	Punctuation	%
25	27	Identifier	MOD1
25	31	Punctuation	;
26	3	Punctuation	}
27	1	Punctuation	}
29	1	Keyword	namespace
29	11	Identifier	SGT
29	15	Punctuation	{
31	1	Keyword	const
31	7	Keyword	int
31	11	Identifier	Maxn
31	15	Punctuation	=
31	16	Literal	15000000
31	24	Punctuation	;
32	1	Keyword	int
32	5	Identifier	testm
32	10	Punctuation	=
32	11	Literal	0
32	12	Punctuation	;
34	1	Keyword	int
34	5	Identifier	sumv1
34	10	Punctuation	[
34	11	Identifier	Maxn
34	15	Punctuation	]
34	16	Punctuation	,
34	17	Identifier	sumv2
34	22	Punctuation	[
34	23	Identifier	Maxn
34	27	Punctuation	]
34	28	Punctuation	;
35	1	Keyword	int
35	5	Identifier	ch
35	7	Punctuation	[
35	8	Identifier	Maxn
35	12	Punctuation	]
35	13	Punctuation	[
35	14	Literal	2
35	15	Punctuation	]
35	16	Punctuation	,
35	17	Identifier	tot
35	20	Punctuation	;
37	1	Keyword	inline
37	8	Keyword	int
37	12	Identifier	cpynode
37	19	Punctuation	(
37	20	Keyword	int
37	24	Identifier	o
37	25	Punctuation	)
37	27	Punctuation	{
38	3	Identifier	tot
38	6	Punctuation	++
38	8	Punctuation	;
39	3	Identifier	sumv1
39	8	Punctuation	[
39	9	Identifier	tot
39	12	Punctuation	]
39	13	Punctuation	=
39	14	Identifier	sumv1
39	19	Punctuation	[
39	20	Identifier	o
39	21	Punctuation	]
39	22	Punctuation	;
39	23	Identifier	sumv2
39	28	Punctuation	[
39	29	Identifier	tot
39	32	Punctuation	]
39	33	Punctuation	=
39	34	Identifier	sumv2
39	39	Punctuation	[
39	40	Identifier	o
39	41	Punctuation	]
39	42	Punctuation	;
40	3	Identifier	ch
40	5	Punctuation	[
40	6	Identifier	tot
40	9	Punctuation	]
40	10	Punctuation	[
40	11	Literal	0
40	12	Punctuation	]
40	13	Punctuation	=
40	14	Identifier	ch
40	16	Punctuation	[
40	17	Identifier	o
40	18	Punctuation	]
40	19	Punctuation	[
40	20	Literal	0
40	21	Punctuation	]
40	22	Punctuation	;
40	23	Identifier	ch
40	25	Punctuation	[
40	26	Identifier	tot
40	29	Punctuation	]
40	30	Punctuation	[
40	31	Literal	1
40	32	Punctuation	]
40	33	Punctuation	=
40	34	Identifier	ch
40	36	Punctuation	[
40	37	Identifier	o
40	38	Punctuation	]
40	39	Punctuation	[
40	40	Literal	1
40	41	Punctuation	]
40	42	Punctuation	;
41	3	Keyword	return
41	10	Identifier	tot
41	13	Punctuation	;
42	1	Punctuation	}
44	1	Keyword	void
44	6	Identifier	pushup
44	12	Punctuation	(
44	13	Keyword	int
44	17	Identifier	l
44	18	Punctuation	,
44	19	Keyword	int
44	23	Identifier	o
44	24	Punctuation	)
44	26	Punctuation	{
45	3	Identifier	sumv1
45	8	Punctuation	[
45	9	Identifier	o
45	10	Punctuation	]
45	11	Punctuation	=
45	12	Punctuation	(
45	13	Identifier	sumv1
45	18	Punctuation	[
45	19	Identifier	ch
45	21	Punctuation	[
45	22	Identifier	o
45	23	Punctuation	]
45	24	Punctuation	[
45	25	Literal	0
45	26	Punctuation	]
45	27	Punctuation	]
45	28	Punctuation	+
45	29	Identifier	pow1
45	33	Punctuation	[
45	34	Identifier	l
45	35	Punctuation	]
45	36	Punctuation	*
45	37	Identifier	sumv1
45	42	Punctuation	[
45	43	Identifier	ch
45	45	Punctuation	[
45	46	Identifier	o
45	47	Punctuation	]
45	48	Punctuation	[
45	49	Literal	1
45	50	Punctuation	]
45	51	Punctuation	]
45	52	Punctuation	)
45	53	Punctuation	%
45	54	Identifier	MOD1
45	58	Punctuation	;
46	3	Identifier	sumv2
46	8	Punctuation	[
46	9	Identifier	o
46	10	Punctuation	]
46	11	Punctuation	=
46	12	Punctuation	(
46	13	Identifier	sumv2
46	18	Punctuation	[
46	19	Identifier	ch
46	21	Punctuation	[
46	22	Identifier	o
46	23	Punctuation	]
46	24	Punctuation	[
46	25	Literal	0
46	26	Punctuation	]
46	27	Punctuation	]
46	28	Punctuation	+
46	29	Identifier	pow2
46	33	Punctuation	[
46	34	Identifier	l
46	35	Punctuation	]
46	36	Punctuation	*
46	37	Identifier	sumv2
46	42	Punctuation	[
46	43	Identifier	ch
46	45	Punctuation	[
46	46	Identifier	o
46	47	Punctuation	]
46	48	Punctuation	[
46	49	Literal	1
46	50	Punctuation	]
46	51	Punctuation	]
46	52	Punctuation	)
46	53	Punctuation	%
46	54	Identifier	MOD2
46	58	Punctuation	;
47	1	Punctuation	}
49	1	Keyword	int
49	5	Identifier	update
49	11	Punctuation	(
49	12	Keyword	int
49	16	Identifier	l
49	17	Punctuation	,
49	18	Keyword	int
49	22	Identifier	r
49	23	Punctuation	,
49	24	Keyword	int
49	28	Identifier	o
49	29	Punctuation	,
49	30	Keyword	int
49	34	Identifier	p
49	35	Punctuation	,
49	36	Keyword	int
49	40	Identifier	q
49	41	Punctuation	)
49	43	Punctuation	{
50	3	Identifier	o
50	4	Punctuation	=
50	5	Identifier	cpynode
50	12	Punctuation	(
50	13	Identifier	o
50	14	Punctuation	)
50	15	Punctuation	;
51	3	Keyword	if
51	6	Punctuation	(
51	7	Identifier	l
51	8	Punctuation	==
51	10	Identifier	r
51	11	Punctuation	)
51	13	Punctuation	{
52	4	Identifier	sumv1
52	9	Punctuation	[
52	10	Identifier	o
52	11	Punctuation	]
52	12	Punctuation	=
52	13	Identifier	sumv2
52	18	Punctuation	[
52	19	Identifier	o
52	20	Punctuation	]
52	21	Punctuation	=
52	22	Identifier	q
52	23	Punctuation	;
53	4	Keyword	return
53	11	Identifier	o
53	12	Punctuation	;
54	3	Punctuation	}
55	3	Keyword	else
55	8	Punctuation	{
56	4	Keyword	int
56	8	Identifier	m
56	9	Punctuation	=
56	10	Punctuation	(
56	11	Punctuation	(
56	12	Identifier	l
56	13	Punctuation	+
56	14	Identifier	r
56	15	Punctuation	)
56	16	Punctuation	>>
56	18	Literal	1
56	19	Punctuation	)
56	20	Punctuation	;
57	4	Keyword	if
57	7	Punctuation	(
57	8	Identifier	m
57	9	Punctuation	>=
57	11	Identifier	p
57	12	Punctuation	)
57	14	Identifier	ch
57	16	Punctuation	[
57	17	Identifier	o
57	18	Punctuation	]
57	19	Punctuation	[
57	20	Literal	0
57	21	Punctuation	]
57	22	Punctuation	=
57	23	Identifier	update
57	29	Punctuation	(
57	30	Identifier	l
57	31	Punctuation	,
57	32	Identifier	m
57	33	Punctuation	,
57	34	Identifier	ch
57	36	Punctuation	[
57	37	Identifier	o
57	38	Punctuation	]
57	39	Punctuation	[
57	40	Literal	0
57	41	Punctuation	]
57	42	Punctuation	,
57	43	Identifier	p
57	44	Punctuation	,
57	45	Identifier	q
57	46	Punctuation	)
57	47	Punctuation	;
58	4	Keyword	else
58	9	Identifier	ch
58	11	Punctuation	[
58	12	Identifier	o
58	13	Punctuation	]
58	14	Punctuation	[
58	15	Literal	1
58	16	Punctuation	]
58	17	Punctuation	=
58	18	Identifier	update
58	24	Punctuation	(
58	25	Identifier	m
58	26	Punctuation	+
58	27	Literal	1
58	28	Punctuation	,
58	29	Identifier	r
58	30	Punctuation	,
58	31	Identifier	ch
58	33	Punctuation	[
58	34	Identifier	o
58	35	Punctuation	]
58	36	Punctuation	[
58	37	Literal	1
58	38	Punctuation	]
58	39	Punctuation	,
58	40	Identifier	p
58	41	Punctuation	,
58	42	Identifier	q
58	43	Punctuation	)
58	44	Punctuation	;
59	4	Identifier	pushup
59	10	Punctuation	(
59	11	Identifier	m
59	12	Punctuation	-
59	13	Identifier	l
59	14	Punctuation	+
59	15	Literal	1
59	16	Punctuation	,
59	17	Identifier	o
59	18	Punctuation	)
59	19	Punctuation	;
60	4	Keyword	return
60	11	Identifier	o
60	12	Punctuation	;
61	3	Punctuation	}
62	1	Punctuation	}
64	1	Keyword	bool
64	6	Identifier	query
64	11	Punctuation	(
64	12	Keyword	int
64	16	Identifier	l
64	17	Punctuation	,
64	18	Keyword	int
64	22	Identifier	r
64	23	Punctuation	,
64	24	Keyword	int
64	28	Identifier	x
64	29	Punctuation	,
64	30	Keyword	int
64	34	Identifier	y
64	35	Punctuation	)
64	37	Punctuation	{
65	3	Keyword	if
65	6	Punctuation	(
65	7	Identifier	sumv1
65	12	Punctuation	[
65	13	Identifier	x
65	14	Punctuation	]
65	15	Punctuation	==
65	17	Identifier	sumv1
65	22	Punctuation	[
65	23	Identifier	y
65	24	Punctuation	]
65	25	Punctuation	&&
65	27	Identifier	sumv2
65	32	Punctuation	[
65	33	Identifier	x
65	34	Punctuation	]
65	35	Punctuation	==
65	37	Identifier	sumv2
65	42	Punctuation	[
65	43	Identifier	y
65	44	Punctuation	]
65	45	Punctuation	)
65	47	Keyword	return
65	54	Literal	0
65	55	Punctuation	;
66	3	Keyword	if
66	6	Punctuation	(
66	7	Identifier	l
66	8	Punctuation	==
66	10	Identifier	r
66	11	Punctuation	)
66	13	Keyword	return
66	20	Identifier	sumv1
66	25	Punctuation	[
66	26	Identifier	x
66	27	Punctuation	]
66	28	Punctuation	<
66	29	Identifier	sumv1
66	34	Punctuation	[
66	35	Identifier	y
66	36	Punctuation	]
66	37	Punctuation	;
67	3	Keyword	else
67	8	Punctuation	{
68	4	Keyword	int
68	8	Identifier	m
68	9	Punctuation	=
68	10	Punctuation	(
68	11	Punctuation	(
68	12	Identifier	l
68	13	Punctuation	+
68	14	Identifier	r
68	15	Punctuation	)
68	16	Punctuation	>>
68	18	Literal	1
68	19	Punctuation	)
68	20	Punctuation	;
69	4	Keyword	if
69	7	Punctuation	(
69	8	Identifier	sumv1
69	13	Punctuation	[
69	14	Identifier	ch
69	16	Punctuation	[
69	17	Identifier	x
69	18	Punctuation	]
69	19	Punctuation	[
69	20	Literal	0
69	21	Punctuation	]
69	22	Punctuation	]
69	23	Punctuation	==
69	25	Identifier	sumv1
69	30	Punctuation	[
69	31	Identifier	ch
69	33	Punctuation	[
69	34	Identifier	y
69	35	Punctuation	]
69	36	Punctuation	[
69	37	Literal	0
69	38	Punctuation	]
69	39	Punctuation	]
69	40	Punctuation	&&
69	42	Identifier	sumv2
69	47	Punctuation	[
69	48	Identifier	ch
69	50	Punctuation	[
69	51	Identifier	x
69	52	Punctuation	]
69	53	Punctuation	[
69	54	Literal	0
69	55	Punctuation	]
69	56	Punctuation	]
69	57	Punctuation	==
69	59	Identifier	sumv2
69	64	Punctuation	[
69	65	Identifier	ch
69	67	Punctuation	[
69	68	Identifier	y
69	69	Punctuation	]
69	70	Punctuation	[
69	71	Literal	0
69	72	Punctuation	]
69	73	Punctuation	]
69	74	Punctuation	)
70	6	Keyword	return
70	13	Identifier	query
70	18	Punctuation	(
70	19	Identifier	m
70	20	Punctuation	+
70	21	Literal	1
70	22	Punctuation	,
70	23	Identifier	r
70	24	Punctuation	,
70	25	Identifier	ch
70	27	Punctuation	[
70	28	Identifier	x
70	29	Punctuation	]
70	30	Punctuation	[
70	31	Literal	1
70	32	Punctuation	]
70	33	Punctuation	,
70	34	Identifier	ch
70	36	Punctuation	[
70	37	Identifier	y
70	38	Punctuation	]
70	39	Punctuation	[
70	40	Literal	1
70	41	Punctuation	]
70	42	Punctuation	)
70	43	Punctuation	;
71	4	Keyword	else
71	9	Keyword	return
71	16	Identifier	query
71	21	Punctuation	(
71	22	Identifier	l
71	23	Punctuation	,
71	24	Identifier	m
71	25	Punctuation	,
71	26	Identifier	ch
71	28	Punctuation	[
71	29	Identifier	x
71	30	Punctuation	]
71	31	Punctuation	[
71	32	Literal	0
71	33	Punctuation	]
71	34	Punctuation	,
71	35	Identifier	ch
71	37	Punctuation	[
71	38	Identifier	y
71	39	Punctuation	]
71	40	Punctuation	[
71	41	Literal	0
71	42	Punctuation	]
71	43	Punctuation	)
71	44	Punctuation	;
72	3	Punctuation	}
73	1	Punctuation	}
75	1	Punctuation	}
77	1	Keyword	struct
77	8	Identifier	Data
77	13	Punctuation	{
78	3	Keyword	int
78	7	Identifier	x
78	8	Punctuation	,
78	9	Identifier	d
78	10	Punctuation	,
78	11	Identifier	rt
78	13	Punctuation	;
79	3	Identifier	Data
79	7	Punctuation	(
79	8	Punctuation	)
79	10	Punctuation	{
79	11	Punctuation	}
80	3	Identifier	Data
80	7	Punctuation	(
80	8	Keyword	int
80	12	Identifier	a
80	13	Punctuation	,
80	14	Keyword	int
80	18	Identifier	b
80	19	Punctuation	,
80	20	Keyword	int
80	24	Identifier	c
80	25	Punctuation	)
80	26	Punctuation	:
80	27	Identifier	x
80	28	Punctuation	(
80	29	Identifier	a
80	30	Punctuation	)
80	31	Punctuation	,
80	32	Identifier	d
80	33	Punctuation	(
80	34	Identifier	b
80	35	Punctuation	)
80	36	Punctuation	,
80	37	Identifier	rt
80	39	Punctuation	(
80	40	Identifier	c
80	41	Punctuation	)
80	43	Punctuation	{
80	44	Punctuation	}
81	3	Keyword	bool
81	8	Keyword	operator
81	17	Punctuation	<
81	19	Punctuation	(
81	20	Keyword	const
81	26	Identifier	Data
81	31	Punctuation	&
81	33	Identifier	b
81	34	Punctuation	)
81	36	Keyword	const
81	42	Punctuation	{
82	4	Keyword	if
82	7	Punctuation	(
82	8	Identifier	d
82	9	Punctuation	!=
82	11	Identifier	b
82	12	Punctuation	.
82	13	Identifier	d
82	14	Punctuation	)
82	16	Keyword	return
82	23	Identifier	d
82	24	Punctuation	>
82	25	Identifier	b
82	26	Punctuation	.
82	27	Identifier	d
82	28	Punctuation	;
83	4	Keyword	return
83	11	Identifier	x
83	12	Punctuation	>
83	13	Identifier	b
83	14	Punctuation	.
83	15	Identifier	x
83	16	Punctuation	;
84	3	Punctuation	}
85	1	Punctuation	}
87	1	Identifier	Data
87	6	Identifier	trans
87	11	Punctuation	(
87	12	Identifier	Data
87	17	Identifier	x
87	18	Punctuation	,
87	19	Keyword	int
87	23	Identifier	u
87	24	Punctuation	,
87	25	Keyword	int
87	29	Identifier	v
87	30	Punctuation	)
87	32	Punctuation	{
88	3	Keyword	int
88	7	Identifier	cur
88	10	Punctuation	[
88	11	Literal	10
88	13	Punctuation	]
88	14	Punctuation	,
88	15	Identifier	cnt
88	18	Punctuation	=
88	19	Literal	0
88	20	Punctuation	;
89	3	Identifier	x
89	4	Punctuation	.
89	5	Identifier	x
89	6	Punctuation	=
89	7	Identifier	u
89	8	Punctuation	;
90	3	Keyword	while
90	9	Punctuation	(
90	10	Identifier	v
90	11	Punctuation	)
90	13	Punctuation	{
91	4	Identifier	cur
91	7	Punctuation	[
91	8	Punctuation	++
91	10	Identifier	cnt
91	13	Punctuation	]
91	14	Punctuation	=
91	15	Identifier	v
91	16	Punctuation	%
91	17	Literal	10
91	19	Punctuation	;
92	4	Identifier	v
92	5	Punctuation	/=
92	7	Literal	10
92	9	Punctuation	;
93	3	Punctuation	}
94	3	Keyword	for
94	6	Punctuation	(
94	7	Keyword	int
94	11	Identifier	i
94	12	Punctuation	=
94	13	Literal	1
94	14	Punctuation	;
94	15	Identifier	i
94	16	Punctuation	<=
94	18	Identifier	cnt
94	21	Punctuation	;
94	22	Identifier	i
94	23	Punctuation	++
94	25	Punctuation	)
94	27	Identifier	x
94	28	Punctuation	.
94	29	Identifier	rt
94	31	Punctuation	=
94	32	Identifier	SGT
94	35	Punctuation	::
94	37	Identifier	update
94	43	Punctuation	(
94	44	Literal	1
94	45	Punctuation	,
94	46	Literal	6e5
94	49	Punctuation	,
94	50	Identifier	x
94	51	Punctuation	.
94	52	Identifier	rt
94	54	Punctuation	,
94	55	Punctuation	++
94	57	Identifier	x
94	58	Punctuation	.
94	59	Identifier	d
94	60	Punctuation	,
94	61	Identifier	cur
94	64	Punctuation	[
94	65	Identifier	cnt
94	68	Punctuation	-
94	69	Identifier	i
94	70	Punctuation	+
94	71	Literal	1
94	72	Punctuation	]
94	73	Punctuation	)
94	74	Punctuation	;
95	3	Keyword	return
95	10	Identifier	x
95	11	Punctuation	;
96	1	Punctuation	}
98	1	Keyword	bool
98	6	Identifier	cmp
98	9	Punctuation	(
98	10	Identifier	Data
98	15	Identifier	x
98	16	Punctuation	,
98	17	Identifier	Data
98	22	Identifier	y
98	23	Punctuation	)
98	25	Punctuation	{
99	3	Keyword	if
99	6	Punctuation	(
99	7	Identifier	x
99	8	Punctuation	.
99	9	Identifier	d
99	10	Punctuation	!=
99	12	Identifier	y
99	13	Punctuation	.
99	14	Identifier	d
99	15	Punctuation	)
99	17	Keyword	return
99	24	Identifier	x
99	25	Punctuation	.
99	26	Identifier	d
99	27	Punctuation	<
99	28	Identifier	y
99	29	Punctuation	.
99	30	Identifier	d
99	31	Punctuation	;
100	3	Keyword	return
100	10	Identifier	SGT
100	13	Punctuation	::
100	15	Identifier	query
100	20	Punctuation	(
100	21	Literal	1
100	22	Punctuation	,
100	23	Literal	6e5
100	26	Punctuation	,
100	27	Identifier	x
100	28	Punctuation	.
100	29	Identifier	rt
100	31	Punctuation	,
100	32	Identifier	y
100	33	Punctuation	.
100	34	Identifier	rt
100	36	Punctuation	)
100	37	Punctuation	;
101	1	Punctuation	}
103	1	Identifier	Data
103	6	Identifier	dis
103	9	Punctuation	[
103	10	Literal	100005
103	16	Punctuation	]
104	1	Identifier	priority_queue
104	16	Punctuation	<
104	17	Identifier	Data
104	21	Punctuation	>
104	23	Identifier	q
106	1	Identifier	vector
106	8	Punctuation	<
106	9	Identifier	pr
106	11	Punctuation	>
106	13	Identifier	e
106	14	Punctuation	[
106	15	Literal	100005
106	21	Punctuation	]
107	1	Keyword	int
107	5	Identifier	len
107	8	Punctuation	[
107	9	Literal	100005
107	15	Punctuation	]
107	16	Punctuation	,
107	17	Identifier	p
107	18	Punctuation	[
107	19	Literal	100005
107	25	Punctuation	]
107	26	Punctuation	,
107	27	Identifier	pl
107	29	Punctuation	[
107	30	Literal	100005
107	36	Punctuation	]
109	1	Keyword	void
109	6	Identifier	dijkstra
109	14	Punctuation	(
109	15	Keyword	int
109	19	Identifier	n
109	20	Punctuation	,
109	21	Keyword	int
109	25	Identifier	m
109	26	Punctuation	)
109	28	Punctuation	{
110	3	Keyword	for
110	6	Punctuation	(
110	7	Keyword	int
110	11	Identifier	i
110	12	Punctuation	=
110	13	Literal	1
110	14	Punctuation	;
110	15	Identifier	i
110	16	Punctuation	<=
110	18	Identifier	m
110	19	Punctuation	;
110	20	Identifier	i
110	21	Punctuation	++
110	23	Punctuation	)
110	25	Identifier	len
110	28	Punctuation	[
110	29	Identifier	i
110	30	Punctuation	]
110	31	Punctuation	=
110	32	Identifier	len
110	35	Punctuation	[
110	36	Identifier	i
110	37	Punctuation	/
110	38	Literal	10
110	40	Punctuation	]
110	41	Punctuation	+
110	42	Literal	1
110	43	Punctuation	;
111	3	Keyword	for
111	6	Punctuation	(
111	7	Keyword	int
111	11	Identifier	i
111	12	Punctuation	=
111	13	Literal	2
111	14	Punctuation	;
111	15	Identifier	i
111	16	Punctuation	<=
111	18	Identifier	n
111	19	Punctuation	;
111	20	Identifier	i
111	21	Punctuation	++
111	23	Punctuation	)
111	25	Identifier	dis
111	28	Punctuation	[
111	29	Identifier	i
111	30	Punctuation	]
111	31	Punctuation	=
111	32	Identifier	Data
111	36	Punctuation	(
111	37	Identifier	i
111	38	Punctuation	,
111	39	Literal	1e9
111	42	Punctuation	,
111	43	Literal	0
111	44	Punctuation	)
111	45	Punctuation	;
112	3	Identifier	dis
112	6	Punctuation	[
112	7	Literal	1
112	8	Punctuation	]
112	9	Punctuation	=
112	10	Identifier	Data
112	14	Punctuation	(
112	15	Literal	1
112	16	Punctuation	,
112	17	Literal	0
112	18	Punctuation	,
112	19	Literal	0
112	20	Punctuation	)
112	21	Punctuation	;
113	3	Identifier	q
113	4	Punctuation	.
113	5	Identifier	push
113	9	Punctuation	(
113	10	Identifier	dis
113	13	Punctuation	[
113	14	Literal	1
113	15	Punctuation	]
113	16	Punctuation	)
113	17	Punctuation	;
114	3	Keyword	while
114	9	Punctuation	(
114	10	Punctuation	!
114	11	Identifier	q
114	12	Punctuation	.
114	13	Identifier	empty
114	18	Punctuation	(
114	19	Punctuation	)
114	20	Punctuation	)
114	22	Punctuation	{
115	4	Identifier	Data
115	9	Identifier	t
115	10	Punctuation	=
115	11	Identifier	q
115	12	Punctuation	.
115	13	Identifier	top
115	16	Punctuation	(
115	17	Punctuation	)
115	18	Punctuation	;
115	19	Identifier	q
115	20	Punctuation	.
115	21	Identifier	pop
115	24	Punctuation	(
115	25	Punctuation	)
115	26	Punctuation	;
116	4	Keyword	if
116	7	Punctuation	(
116	8	Identifier	cmp
116	11	Punctuation	(
116	12	Identifier	dis
116	15	Punctuation	[
116	16	Identifier	t
116	17	Punctuation	.
116	18	Identifier	x
116	19	Punctuation	]
116	20	Punctuation	,
116	21	Identifier	t
116	22	Punctuation	)
116	23	Punctuation	)
116	25	Keyword	continue
116	33	Punctuation	;
117	4	Keyword	int
117	8	Identifier	x
117	9	Punctuation	=
117	10	Identifier	t
117	11	Punctuation	.
117	12	Identifier	x
117	13	Punctuation	,
117	14	Identifier	d
117	15	Punctuation	=
117	16	Identifier	t
117	17	Punctuation	.
117	18	Identifier	d
117	19	Punctuation	;
118	4	Keyword	for
118	7	Punctuation	(
118	8	Keyword	int
118	12	Identifier	i
118	13	Punctuation	=
118	14	Literal	0
118	15	Punctuation	;
118	16	Identifier	i
118	17	Punctuation	<
118	18	Identifier	e
118	19	Punctuation	[
118	20	Identifier	x
118	21	Punctuation	]
118	22	Punctuation	.
118	23	Identifier	size
118	27	Punctuation	(
118	28	Punctuation	)
118	29	Punctuation	;
118	30	Identifier	i
118	31	Punctuation	++
118	33	Punctuation	)
118	35	Punctuation	{
119	5	Keyword	int
119	9	Identifier	u
119	10	Punctuation	=
119	11	Identifier	e
119	12	Punctuation	[
119	13	Identifier	x
119	14	Punctuation	]
119	15	Punctuation	[
119	16	Identifier	i
119	17	Punctuation	]
119	18	Punctuation	.
119	19	Identifier	FR
119	21	Punctuation	,
119	22	Identifier	v
119	23	Punctuation	=
119	24	Identifier	e
119	25	Punctuation	[
119	26	Identifier	x
119	27	Punctuation	]
119	28	Punctuation	[
119	29	Identifier	i
119	30	Punctuation	]
119	31	Punctuation	.
119	32	Identifier	SE
119	34	Punctuation	;
120	5	Keyword	if
120	8	Punctuation	(
120	9	Identifier	d
120	10	Punctuation	+
120	11	Identifier	len
120	14	Punctuation	[
120	15	Identifier	v
120	16	Punctuation	]
120	17	Punctuation	<
120	18	Identifier	dis
120	21	Punctuation	[
120	22	Identifier	u
120	23	Punctuation	]
120	24	Punctuation	.
120	25	Identifier	d
120	26	Punctuation	)
120	28	Punctuation	{
121	6	Identifier	dis
121	9	Punctuation	[
121	10	Identifier	u
121	11	Punctuation	]
121	12	Punctuation	=
121	13	Identifier	trans
121	18	Punctuation	(
121	19	Identifier	dis
121	22	Punctuation	[
121	23	Identifier	x
121	24	Punctuation	]
121	25	Punctuation	,
121	26	Identifier	u
121	27	Punctuation	,
121	28	Identifier	v
121	29	Punctuation	)
121	30	Punctuation	;
122	6	Identifier	p
122	7	Punctuation	[
122	8	Identifier	u
122	9	Punctuation	]
122	10	Punctuation	=
122	11	Identifier	x
122	12	Punctuation	;
122	13	Identifier	pl
122	15	Punctuation	[
122	16	Identifier	u
122	17	Punctuation	]
122	18	Punctuation	=
122	19	Identifier	v
122	20	Punctuation	;
123	6	Identifier	q
123	7	Punctuation	.
123	8	Identifier	push
123	12	Punctuation	(
123	13	Identifier	dis
123	16	Punctuation	[
123	17	Identifier	u
123	18	Punctuation	]
123	19	Punctuation	)
123	20	Punctuation	;
124	5	Punctuation	}
125	3	Keyword	else
125	8	Keyword	if
125	11	Punctuation	(
125	12	Identifier	d
125	13	Punctuation	+
125	14	Identifier	len
125	17	Punctuation	[
125	18	Identifier	v
125	19	Punctuation	]
125	20	Punctuation	==
125	22	Identifier	dis
125	25	Punctuation	[
125	26	Identifier	u
125	27	Punctuation	]
125	28	Punctuation	.
125	29	Identifier	d
125	30	Punctuation	)
125	32	Punctuation	{
126	4	Identifier	Data
126	9	Identifier	t
126	10	Punctuation	=
126	11	Identifier	trans
126	16	Punctuation	(
126	17	Identifier	dis
126	20	Punctuation	[
126	21	Identifier	x
126	22	Punctuation	]
126	23	Punctuation	,
126	24	Identifier	u
126	25	Punctuation	,
126	26	Identifier	v
126	27	Punctuation	)
126	28	Punctuation	;
127	4	Keyword	if
127	7	Punctuation	(
127	8	Identifier	cmp
127	11	Punctuation	(
127	12	Identifier	t
127	13	Punctuation	,
127	14	Identifier	dis
127	17	Punctuation	[
127	18	Identifier	u
127	19	Punctuation	]
127	20	Punctuation	)
127	21	Punctuation	)
127	23	Punctuation	{
128	5	Identifier	dis
128	8	Punctuation	[
128	9	Identifier	u
128	10	Punctuation	]
128	11	Punctuation	=
128	12	Identifier	t
128	13	Punctuation	;
129	5	Identifier	p
129	6	Punctuation	[
129	7	Identifier	u
129	8	Punctuation	]
129	9	Punctuation	=
129	10	Identifier	x
129	11	Punctuation	;
129	12	Identifier	pl
129	14	Punctuation	[
129	15	Identifier	u
129	16	Punctuation	]
129	17	Punctuation	=
129	18	Identifier	v
129	19	Punctuation	;
130	5	Identifier	q
130	6	Punctuation	.
130	7	Identifier	push
130	11	Punctuation	(
130	12	Identifier	dis
130	15	Punctuation	[
130	16	Identifier	u
130	17	Punctuation	]
130	18	Punctuation	)
130	19	Punctuation	;
131	4	Punctuation	}
132	3	Punctuation	}
133	4	Punctuation	}
134	3	Punctuation	}
135	1	Punctuation	}
137	1	Keyword	int
137	5	Identifier	ans
137	8	Punctuation	[
137	9	Literal	100005
137	15	Punctuation	]
138	1	Keyword	bool
138	6	Identifier	vis
138	9	Punctuation	[
138	10	Literal	100005
138	16	Punctuation	]
140	1	Keyword	int
140	5	Identifier	solve
140	10	Punctuation	(
140	11	Keyword	int
140	15	Identifier	x
140	16	Punctuation	)
140	18	Punctuation	{
141	3	Keyword	if
141	6	Punctuation	(
141	7	Identifier	vis
141	10	Punctuation	[
141	11	Identifier	x
141	12	Punctuation	]
141	13	Punctuation	)
141	15	Keyword	return
141	22	Identifier	ans
141	25	Punctuation	[
141	26	Identifier	x
141	27	Punctuation	]
141	28	Punctuation	;
142	3	Identifier	vis
142	6	Punctuation	[
142	7	Identifier	x
142	8	Punctuation	]
142	9	Punctuation	=
142	10	Literal	1
142	11	Punctuation	;
143	3	Keyword	return
143	10	Identifier	ans
143	13	Punctuation	[
143	14	Identifier	x
143	15	Punctuation	]
143	16	Punctuation	=
143	17	Punctuation	(
143	18	Identifier	solve
143	23	Punctuation	(
143	24	Identifier	p
143	25	Punctuation	[
143	26	Identifier	x
143	27	Punctuation	]
143	28	Punctuation	)
143	29	Punctuation	*
143	30	Identifier	powd
143	34	Punctuation	[
143	35	Identifier	len
143	38	Punctuation	[
143	39	Identifier	pl
143	41	Punctuation	[
143	42	Identifier	x
143	43	Punctuation	]
143	44	Punctuation	]
143	45	Punctuation	]
143	46	Punctuation	+
143	47	Identifier	pl
143	49	Punctuation	[
143	50	Identifier	x
143	51	Punctuation	]
143	52	Punctuation	)
143	53	Punctuation	%
143	54	Identifier	MOD1
143	58	Punctuation	;
144	1	Punctuation	}
